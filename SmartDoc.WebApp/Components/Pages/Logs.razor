@page "/logs"
@rendermode InteractiveServer
@inject HttpClient Http

@using SmartDoc.WebApp.Models

<style>
    .disabled-link {
        pointer-events: none;
        cursor: none;
        background-color: #ccc;
    }
</style>

<PageTitle>Logs</PageTitle>

<h2>Histórico</h2>

<p>This component demonstrates showing data.</p>

@if (isLoading)
{
    <p><em>Cargando logs...</em></p>
}
else
{
    <div class="row">
        <div class="col-12 d-flex justify-content-end">
            <a href="@(logs.Any() ? GenerateDownloadUrl() : "#")"
               class="btn btn-success mb-3 @(logs.Any() ? "" : "disabled-link")"
               style="width: 200px;">
                <i class="bi bi-file-excel"></i> Exportar
            </a>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col">
            <input type="text" class="form-control" placeholder="Filter by ActionType" @bind="filterActionType">
        </div>
        <div class="col">
            <input type="text" class="form-control" placeholder="Filter by Description" @bind="filterDescription">
        </div>
        <div class="col">
            <input type="date" class="form-control" @bind="startDate" @oninput="HandleStartDateChange">
        </div>
        <div class="col">
            <input type="date" class="form-control" @bind="endDate" @oninput="HandleEndDateChange">
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="ApplyFilters" disabled="@IsApplyDisabled()"><i class="bi bi-funnel"></i> Filtrar</button>
            <button class="btn btn-secondary" @onclick="ClearFilters" disabled="@IsApplyDisabled()"><i class="bi bi-arrow-counterclockwise"></i> Reiniciar</button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Action Type</th>
                <th>Description</th>
                <th>Created On</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in logs)
            {
                <tr>
                    <td>@log.Id</td>
                    <td>@log.ActionType</td>
                    <td>@log.Description</td>
                    <td>@log.CreatedOn.ToString("yyyy-MM-dd HH:mm:ss")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string filterActionType = "";
    private string filterDescription = "";
    private DateTime? startDate;
    private DateTime? endDate;
    private List<LogResult> logs = new();
    private List<LogResult> allLogs = new();
    private string errorMessage = "";
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FetchLogs();
        }
    }


    private async Task FetchLogs()
    {
        errorMessage = string.Empty;
        try
        {
            var response = await Http.GetAsync("https://localhost:7004/api/logs");
            if (response.IsSuccessStatusCode)
            {
                allLogs = await response.Content.ReadFromJsonAsync<List<LogResult>>() ?? new List<LogResult>();
                logs = new List<LogResult>(allLogs);
            }
            else
            {
                errorMessage = "Error al cargar los logs.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    private void ApplyFilters()
    {
        if (allLogs is null || !allLogs.Any()) return;

        logs = allLogs.Where(log =>
            (string.IsNullOrEmpty(filterActionType) || log.ActionType.Contains(filterActionType, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(filterDescription) || log.Description.Contains(filterDescription, StringComparison.OrdinalIgnoreCase)) &&
            (!startDate.HasValue || log.CreatedOn.Date >= startDate.Value) &&
            (!endDate.HasValue || log.CreatedOn.Date <= endDate.Value)
        ).ToList();
    }

    private void ClearFilters()
    {
        filterActionType = "";
        filterDescription = "";
        startDate = null;
        endDate = null;
        logs = allLogs.ToList();
        errorMessage = "";
    }

    private void HandleStartDateChange(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var newStartDate))
        {
            startDate = newStartDate;
            ValidateDates();
        }
    }

    private void HandleEndDateChange(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var newEndDate))
        {
            endDate = newEndDate;
            ValidateDates();
        }
    }

    private void ValidateDates()
    {
        if (startDate.HasValue && endDate.HasValue && endDate < startDate)
            errorMessage = "La fecha final debe ser igual o mayor a la fecha inicial.";
        else
            errorMessage = "";
    }

    private bool IsApplyDisabled()
    {
        return string.IsNullOrEmpty(filterActionType) && string.IsNullOrEmpty(filterDescription) && !startDate.HasValue && !endDate.HasValue;
    }

    @code {
        private string GenerateDownloadUrl()
        {
            var baseUrl = "https://localhost:7004/api/logs/download";
            var query = $"?actionType={Uri.EscapeDataString(filterActionType ?? "")}&description={Uri.EscapeDataString(filterDescription ?? "")}";

            if (startDate.HasValue)
            {
                query += $"&startDate={startDate.Value.ToString("yyyy-MM-dd")}";
            }
            if (endDate.HasValue)
            {
                query += $"&endDate={endDate.Value.ToString("yyyy-MM-dd")}";
            }

            return baseUrl + query;
        }
    }

}
